#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
  echo ''
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

update_submodules () {
  info 'Update git submodules ...'
  git submodule update --init --recursive

  success "git submodule update --init --recursive"
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'Setup gitconfig ...'

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

setup_vim () {
  if ! [ -L system/vim.symlink ]
  then
    info 'Setup vim ...'
    ln -s $DOTFILES_ROOT/vim $DOTFILES_ROOT/system/vim.symlink

    success 'vim'
  fi
  if ! [ -L system/vimrc.symlink ]
  then
    info 'Setup vimrc ...'
    ln -s $DOTFILES_ROOT/vim/vimrc $DOTFILES_ROOT/system/vimrc.symlink

    success 'vimrc'
  fi
  if ! [ -L system/gvimrc.symlink ]
  then
    info 'Setup gvimrc ...'
    ln -s $DOTFILES_ROOT/vim/gvimrc $DOTFILES_ROOT/system/gvimrc.symlink

    success 'gvimrc'
  fi
}

setup_vim_vundle () {
    git clone https://github.com/gmarik/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim
    success 'vundle'
}

setup_tmux() {
  if ! [ -L system/tmux.conf.symlink ]
  then
    info 'Setup tmux.conf ...'
    ln -s $DOTFILES_ROOT/tmux/tmux.conf $DOTFILES_ROOT/system/tmux.conf.symlink

    success 'tmux.conf'
  fi
}

setup_gdb() {
  if ! [ -L system/gdbinit.symlink ]
  then
    info 'Setup gdbinit ...'
    ln -s $DOTFILES_ROOT/gdb/gdbinit $DOTFILES_ROOT/system/gdbinit.symlink

    success 'gdbinit'
  fi
}

install_oh_my_zsh () {
  info "Installing Oh My Zsh ..."
  if [ -d $HOME/.oh-my-zsh ] || [ -L $HOME/.oh-my-zsh ]
  then
    info "\033[0;33mYou already have Oh My Zsh installed.\033[0m"
  else
    info "\033[0;34mSymlinking Oh My Zsh ...\033[0m"
    ln -s $DOTFILES_ROOT/oh-my-zsh $HOME/.oh-my-zsh

    info "\033[0;34mLooking for an existing zsh config ...\033[0m"
    if [ -f $HOME/.zshrc ] || [ -h $HOME/.zshrc ]
    then
      info "\033[0;33mFound $HOME/.zshrc.\033[0m"
      info "\033[0;32mBacking up to $HOME/.zshrc.backup\033[0m"
      mv $HOME/.zshrc $HOME/.zshrc.backup
    fi

    info "\033[0;34mUsing my Oh My Zsh config file and adding it to $HOME/.zshrc\033[0m"
    cp $DOTFILES_ROOT/zsh/zshrc.oh-my-zsh $HOME/.zshrc

    info "\033[0;34mLinking custom configuration from $DOTFILES_ROOT/system/*.zsh to $HOME/.oh-my-zsh/cutom\033[0m"
    for custom_config_file in $DOTFILES_ROOT/system/*.zsh; do
        ln -s $custom_config_file $HOME/.oh-my-zsh/custom/$(basename $custom_config_file)
    done

    info "\033[0;34mCopying your current PATH and adding it to the end of $HOME/.zshrc for you.\033[0m"
    echo "export PATH=\$PATH:$PATH" >> $HOME/.zshrc

    info "\033[0;34mPrevent PATH recursion[0m"
    echo "typeset -gU PATH" >> $HOME/.zshrc


    info "\033[0;32m"'         __                                     __   '"\033[0m"
    info "\033[0;32m"'  ____  / /_     ____ ___  __  __   ____  _____/ /_  '"\033[0m"
    info "\033[0;32m"' / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \ '"\033[0m"
    info "\033[0;32m"'/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / / '"\033[0m"
    info "\033[0;32m"'\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/  '"\033[0m"
    info "\033[0;32m"'                        /____/                       '"\033[0m"

    info "\n\n \033[0;32m....is now installed.\033[0m"

    info "\033[0;34mTime to change your default shell to zsh!\033[0m"
    chsh -s `which zsh`

    /usr/bin/env zsh
    source ~/.zshrc
  fi

  success 'oh-my-zsh'
  info "Run 'vim -u $HOME/.vim/bundles.vim +BundleInstall +q' to install all vim plugins!"
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'Installing dotfiles ...'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
update_submodules
setup_vim
setup_tmux
setup_gdb
install_dotfiles
setup_vim_vundle
install_oh_my_zsh

# If we are on a mac, lets install and setup homebrew
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if . bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
